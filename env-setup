#!/bin/bash
################################################################################
# Purpose:
#     Convert template files to usable files to make working in git branches easier
#     For each tracked file
#         - Copy and rename template files based on git branch 
#         - Decrypt encrypted files before copying
#
# Context: Git hook called after successful checkout 
#
# Install
#     Place in .git/hooks directory
#     Must have gpg installed
#     Set GPGHOMEDIR to GPG file location
#     Set other constants as needed
#
# Notes:
#     - Encrypted files must end in .secret
#     - Tracked file paths are relative to git root
#     - only "dev" and "main" branches are currently defined
#     - branch name must map to a 3-letter file extension (.dev or .prd)
#
################################################################################
#BRANCH="main"    # mock for testing/debugging
BRANCH=$(git rev-parse --abbrev-ref HEAD)
ROOT=$(git rev-parse --show-toplevel)
GPGHOMEDIR="/home/www-data/.gnupg"
FILE_EXT_SEP="."
FILE_EXT_SEP_LEN=${#FILE_EXT_SEP}
SECRET_EXT="secret"
SECRET_EXT_LEN=${#SECRET_EXT}
ENV_EXT_LEN=3    # 3 chars plus .
TRACKED_FILES=( "conf.yaml.dev"              \
                "conf.yaml.prd"              \
                "secrets.yaml.dev.secret"    \
                "secrets.yaml.prd.secret"    )

# test cases
#TRACKED_FILES=( "backend/exists.yaml.dev"           \    
#                "backend/exists.yaml.prd"           \
#                "backend/missng.yaml.dev"           \
#                "backend/exists.yaml.dev.secret"    \
#                "backend/exists.yaml.prd.secret"    \
#                "backend/missng.yaml.dev.secret"    )

echo "Checkout successful. Setting up environment for branch '$BRANCH'"

#####################################################
### Branch mappings
#####################################################
if [ $BRANCH == "dev" ]; then
    this_env="dev"
elif [ $BRANCH == "main" ]; then
    this_env="prd"
else
    echo -e "No environment mapping found for branch '$BRANCH'. Quitting setup."
    exit 1
fi;

#####################################################
### Decrypt and move files as needed
#####################################################
for t in ${TRACKED_FILES[@]}; do
    ofn=$ROOT/$t 
    ofn_len=${#ofn}
    nfn=""
    if [ ! -f "$ofn" ]; then
        echo "Warning: $ofn not found"
        continue    # file does not exist
    fi

    # Decrypt
    val=${ofn: $ofn_len - $SECRET_EXT_LEN }
    if [ $val == $SECRET_EXT ]; then
        
        nfn=${ofn: 0 : $ofn_len  - ($FILE_EXT_SEP_LEN + $SECRET_EXT_LEN) }

        echo "Decrypting - '$ofn' -> '$nfn'"
        sudo gpg --homedir $GPGHOMEDIR --yes -o $nfn -dq $ofn
    fi

    if [[ -n $nfn ]]; then
        ofn=$nfn    # n chars are now stripped from end of file where n = ($FILE_EXT_SEP_LEN + $SECRET_EXT_LEN)
        ofn_len=${#ofn}
    fi
    
    # Move file if env extension matches current env
    file_env_ext=${ofn: $ofn_len - $ENV_EXT_LEN : $ENV_EXT_LEN }
    if [ $file_env_ext == $this_env ]; then
        nfn=${ofn: 0 : $ofn_len  - ($ENV_EXT_LEN + $FILE_EXT_SEP_LEN) }
        
        echo "Copying - '$ofn' -> '$nfn'"
        if [ ! -f "$ofn" ]; then
            echo "Warning: $ofn not found. Skipping copy."
            continue    # file does not exist
        fi
        cp $ofn $nfn
    fi
done

#####################################################
### Prompt to update apache conf
#####################################################